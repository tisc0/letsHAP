#!/usr/bin/env sh

##################################################
### letsHAP - David S. - 2016, 1st of October  ###
##################################################
###
### This program needs you to create a specific backend 
### in haproxy's configfile (cf haproxy.cfg example).
###
### v0.3 - Adding management of certificates from a node in a cluster, 
### behind a proxy, with rsync as publisher

# Help
func_usage(){
cat << EOF

 ~ Usage : $0 [Options] [PARAM]

 Beware : First start, you have to run $0 --register [EMAIL]

Options
-------
-dry |--dry-run
* Simulation mode

-re |--register [EMAIL]
* Create your account on let's Encrypt and /etc/letsencrypt directory

-res |--register-staging [EMAIL]
* Create your STAGING account on let's Encrypt - Required for test certificates (--testcert)

-a |--add [DOMAIN]
* Create and install certificate for one or multiple domains (SAN - max renewal : 200/week)
* Create renewal config file(s) for  domain(s)
* Add and refresh HAProxy's ssl cert list
* Check config file && restart HAProxy
~ The certname will be the first domain of the list
ex:
letsHAP -a mydomain.com
letsHAP -a mydomain1.com,mydomain2.com,www.mydomain1.com,www.mydomain2.com

-ra |--renew-all
* Renew what's needed for renewed domains
* Regenerate .pem files for HAProxy
* HAProxy : Check config file && restart

-rl |--reload-only
* Reload Haproxy service with all the necessary checks to not break it if something's wrong

-rev |--revoke [CERTNAME]
* Revoke in place a certificate (don't move any file) and all the SANs attached to it
~ The certname is either the domain of a single domain certificate, either the first domain of a list of certificates
~ If you need to revoke the 'certname' domain, please revoke it entirely and recreate a SAN without it
ex:
letsHAP -rev mydomain1.com && letsHAP -a mydomain2.com,www.mydomain1.com,www.mydomain2.com

-del |--delete
* Delete completely a cert chain
* Clean up and restart HAProxy

-f| --forceRegenerate
* Used with --dry-run, permit to force the renewal of haproxy chain files

-t | --test-cert
* Create a test certificate - Require to be registered with a staging account

-lh | --letshub
* switch to letsHUB context (specific DIRs, no local haproxy restarted)

-h |--help
* Getting this how to use details

Error codes
-----------
exit 1 : Undefined error
exit 2 : Certname doesn't exists
exit 3 : Certificate already revoked
exit 4 : Undefined revocation error
exit 9 : Script's not enabled

Examples:
---------
# Production registering account
$0 -re my@address.tld
# Staging registering account
$0 -res my@address.tld
# Create SAN
$0 -a domain.tld,www.domain.tld
# Create test cert
$0 -t -a domain2.tld,www.domain2.tld
# Delete certname && clean HAProxy ssl file
$0 -del domain2.tld

EOF
}

# We need at least $min argument
check_argv1_f(){
	min='1'
        if [ "$1" -lt "$min" ]
        then
                func_usage
		echo "Parameters are missing ; at least $min needed - exit"
                exit 1
        fi
}
check_argv1_f "$#"

####################################
### CUSTOMIZE AND ENABLE IT HERE ###
####################################

###############
### GLOBALS ###
###############
DATE=$(date +%Y%m%d-%H%M%S)
WORKING_DIR='/etc/letsencrypt'
LETS_LIVE_PATH='/etc/letsencrypt/live'
LETS_ARCH_PATH='/etc/letsencrypt/archive'
INSTALLED_DOMAINS="$(test -d ${LETS_LIVE_PATH} && ls -d ${LETS_LIVE_PATH}/* | cut -d'/' -f 5)"
OUTPUT_RD="${WORKING_DIR}/renewal/letsHAP_autorenew_domains.${DATE}"
PREFERRED_CHALLENGE='http-01'
CERTBOT_BK_NAME="http-01-port"
BK_PORT='63443'
STAGING=''
FORCE_REGENERATE=''
OTHER_SERVICES_TO_RELOAD='dovecot postfix'


## Global Variables in a function to source later
_source_paths_variables(){
	local autocertname="${1}"
	if [[ "${LETSHUB}" == 'yes' ]]
	then
		HAPX_CONFFILE=''
		HAPX_INSTANCE=''
		HAPX_CERTDIR='/home/letsHUB'
		HAPX_REMOTE_CERTLIST_NAME='ssl2.lst'
		HAPX_REMOTE_CERTDIR='/etc/haproxy/ssl/letsHUB'
		HAPX_CERTLIST="${HAPX_CERTDIR}/${HAPX_REMOTE_CERTLIST_NAME}"
		HAP_PEM_PATH="${HAPX_CERTDIR}"
		PROXY_IP='' 
		RSYNC_PASSWORD_FILE='' # ex: '/root/rsyncpass' with chmod 600
		RSYNC_USER='rsync'
		REMOTE_DIR='letsencrypt' # whatever you set up on the destination rsyncd conf file
		fullchainFileHAP="${HAPX_REMOTE_CERTDIR}/fullchain_haproxy_${autocertname}.pem"
		fullchainFile="${LETS_LIVE_PATH}/${autocertname}/fullchain.pem"
		privkeyFile="${LETS_LIVE_PATH}/${autocertname}/privkey.pem"
	else
		HAPX_CONFFILE='/etc/haproxy/haproxy.cfg' # Default : '/etc/haproxy/haproxy.cfg'
		HAPX_INSTANCE='haproxy' # Default : 'haproxy'
		HAPX_CERTDIR='/etc/haproxy/ssl'
		HAPX_CERTLIST="${HAPX_CERTDIR}/ssl.lst"
		HAP_PEM_PATH="${LETS_LIVE_PATH}"
		fullchainFileHAP="${LETS_ARCH_PATH}/${autocertname}/fullchain_haproxy.pem"
		fullchainFile="${LETS_LIVE_PATH}/${autocertname}/fullchain.pem"
		privkeyFile="${LETS_LIVE_PATH}/${autocertname}/privkey.pem"
	fi

	# Whatever happened, we create HAPX_CERTDIR
	if [ ! -d "${HAPX_CERTDIR}" ] && [ -n "${HAPX_CERTDIR}" ] 
	then
		mkdir -p ${HAPX_CERTDIR}
		chmod -R o-rwx ${HAPX_CERTDIR}
	fi
}

LETSHUB='no' #Change this value via command line option (-lh)
ENABLED='1'

# Check if you read and customized this file, or die
if [ "$ENABLED" != '1' ] 
then
	echo 'Some parameters have to be defined - Edit the script before use'
	exit 9
fi


##########################
### WALKING PARAMETERS ###
##########################
for argv1 in "$@"
do
	case ${argv1} in
		-re  | --register)
			todo='register'
			REGISTERING_EMAIL="$2"
			shift 2
			;;
		-res | --register-staging)
			todo='register'
			REGISTERING_EMAIL="$2"
			STAGING='--staging'
			shift 2
			;;
		-a   |--add)
			todo="add"
			domainToAdd="$2"
			shift 2
			;;
		-ra  |--renew-all)
			todo="renew-all"
			shift
			;;
		-rev |--revoke)
			todo="revoke"
			domainToRevoke="$2"
			shift 2
			;;
		-del |--delete)
			todo="delete"
			domainToDelete="$2"
			shift 2
			;;
		-dry | --dry-run)
			dryrun='--dry-run'
			shift
			;;
		-h   | --help)
			func_usage
			;;
		-f   | --forceRegenerate)
			FORCE_REGENERATE='y'
			shift
			;;
		-t   | --testcert)
			echo 'Staging Mode (test cert)'
			TESTCERT='--test-cert'
			shift
			;;
		-rl  | --reload)
			todo="reload"	
			shift
			;;
		-lh  | --letshub)
			LETSHUB='yes'
			shift
			;;
	esac
done


#################
### FUNCTIONS ###
#################

_register(){
	local email="${1}"
	if [ -z "${REGISTERING_EMAIL}" ] 
	then
		func_usage
		exit 1
	else
		certbot register --no-eff-email --agree-tos ${STAGING} -m ${email}
	fi
}

_add_cert_for_domain (){
	local myDomain="$1"
	local autocertname=$(echo ${myDomain} | cut -d',' -f1)

	# the magic
	echo -n "Let's create your cert for $myDomain... "

	# --expand allow to add domains/SANs to an existing certificate
	# --allow-subset-of-names tells Certbot to continue with certificate generation if only some of the specified domain authorizations can be obtained. This may be useful if some domains specified in a certificate no longer point at this system.
	# the comma separated format for -d $domains is also supported by HAProxy ssl.lst
	# Eventually, the comma separated doesn't work while trying to surf on the websites (a colleague tested, thks BYE)
	create_cert=$(certbot certonly --cert-name ${autocertname} -q ${dryrun} --expand --standalone --preferred-challenges ${PREFERRED_CHALLENGE} --${CERTBOT_BK_NAME} ${BK_PORT} --noninteractive ${TESTCERT} -d ${myDomain} 2>&1)
        local is_success=$(echo $?)
        if [ "$is_success" = '0' ]
        then
                echo "OK"
		echo "We need to update HAPROXY certlist now... "
		
        else
                echo "NOK - exit"
		echo "$create_cert"
                exit 1
        fi

}

_create_haproxy_fullchain (){
	# Can be multiple domains comma separated
	local domains="${1}"
	# autocertname will be the DIR name in let's ARCH and LIVE dirs
	local certname=$(echo ${domains} | cut -d',' -f1)

	# Those might be global VARS...
	#local fullchainFileHAP="${LETS_ARCH_PATH}/${autocertname}/fullchain_haproxy.pem"
	#local fullchainFile="${LETS_LIVE_PATH}/${autocertname}/fullchain.pem"
	#local privkeyFile="${LETS_LIVE_PATH}/${autocertname}/privkey.pem"
	_source_paths_variables ${certname}

	# Checking if that domain/autocertname's DIR exists
	if [ ! -d "${LETS_ARCH_PATH}/${certname}" ]
	then 
		echo "No certificate found for certname ${certname} - exit"
		exit 1
	fi
	# Overwrite HAP fullchain if exists (should not :])
	echo "Creating HAPROXY fullchain file for certname ${certname} (full SAN : ${domains})... "
        cat "${fullchainFile}" "${privkeyFile}" > ${fullchainFileHAP} && echo -n "OK " || echo -n "NOK - "
        echo

	# Symlink the new fullchain file in letsencrypt live dir
	if [ "${LETSUB}" == 'no' ]
	then
		echo -n "Creating symlink in live directory... "
		if ! test -L ${fullchainFileHAP} 
		then
			ln -s ${fullchainFileHAP} ${LETS_LIVE_PATH}/${certname}/ && echo OK || echo NOK
		else
			echo 'No need'
		fi
	fi

	# Deleting all lines containing the certname [of the SAN] in cert list
	sed -i "/${certname}/d" "${HAPX_CERTLIST}"

	# Feeding HAProxy ssl.lst
	echo -n "Adding line(s) in ${HAPX_CERTLIST}... "
	# Looping the domains (Seems haproxy actually needs one line per domain in the SAN, even with the same cert, and even if the reload/restart of the process is OK [Navigator Error])
	for domain in $(echo ${domains} | sed "s/,/ /g")
	do
		echo "${fullchainFileHAP} ${domain}" >> ${HAPX_CERTLIST} && echo OK || echo NOK
	done

	# We restart haproxy for instant production use of the domains
	#-> now in todo cases - only if LETSHUB=no
	# Return code to confirm services can be reloaded
	return 66
}

_renew_domains(){
	echo "**** Renewing all domains **** "
	#local renew=$(certbot renew -q ${dryrun} --standalone --preferred-challenges ${PREFERRED_CHALLENGE} --${CERTBOT_BK_NAME} ${BK_PORT} 2>&1)
	local renew=$(certbot renew ${dryrun} --standalone --preferred-challenges ${PREFERRED_CHALLENGE} --${CERTBOT_BK_NAME} ${BK_PORT} 2>&1)
	is_success=$(echo $?)
	if [ "$is_success" = '0' ]
	then
		echo "$renew" > ${OUTPUT_RD}
		echo "$renew" 
		echo "OK" 
	else
		echo "NOK - Debug :"
		echo "${renew}"
		exit 1
	fi

}

_reload_haproxy (){
	local conffile="$1"
	local instance="${2}"
	local cmd='reload' # default : 'reload'
	local check_conf=$(/usr/sbin/haproxy -f ${conffile} -c)
	local is_success=$(echo $?)
	if [ $is_success -eq '0' ]
	then
		#echo -n "Restarting haproxy (stop & start)... "
		echo -n "${cmd} haproxy... "
		#systemctl stop ${instance}.service || echo -n "(Problem while stopping ${instance}.service)... "
		#systemctl start ${instance}.service && echo OK || echo NOK
		systemctl ${cmd} ${instance}.service && echo OK || echo NOK
	else
		echo "Problem with HAPROXY config file - exit"
		exit 1
	fi
}

_update_haproxy_fullchains (){
	local myOutputFile="$1"
	local forceRegenerate=$(echo "${2}" | cut -d'=' -f2)

	fullchainsToRenew=$( cat ${myOutputFile} | grep letsencrypt | grep success | awk '{print $1}')
	if [ -n "$fullchainsToRenew" ] || [ "$forceRegenerate" = 'y'  ]
	then
		echo "*** Renewing fullchains for HAPROXY ***"
		for cert in $fullchainsToRenew
		do
			local certname=$(echo $cert | cut -d'/' -f 5)
        		#local fullchainFileHAP="${LETS_ARCH_PATH}/${certname}/fullchain_haproxy.pem"
		        #local fullchainFile="${LETS_LIVE_PATH}/${certname}/fullchain.pem"
		        #local privkeyFile="${LETS_LIVE_PATH}/${certname}/privkey.pem"
			_source_paths_variables ${certname}

			echo "Fullchain to renew -> $cert"
			# Backup the old fullchain file and freeing the file
			echo "Backup the old fullchain file of ${certname} : "
			if [ -f "${fullchainFileHAP}" ]
			then
				mv ${fullchainFileHAP} ${fullchainFileHAP}.${DATE} && echo OK || echo NOK
			else
				echo "doesn't exist - no backup to be done "
			fi

			# generate the new one
			echo "Generating the new one(s)... "
			for file in ${fullchainFile} ${privkeyFile} 
			do
				echo -n "cat $file : "
				cat ${file} >> ${fullchainFileHAP} && echo -n "OK " || echo -n "NOK - "
				echo
			done
		done

		# We need to restart HAPROXY, of course
		#-> in todo cases since letshub
		# And the other services
		#-> in todo cases since letshub
		# Return code to confirm services can be reloaded
		return 66

	else
		echo "No HAProxy pem files to update - exit"
		exit 0
	fi
}

_revoke_cert(){
	local certname="${1}"
	# Find it, or quit
	local certPath=$(find /etc/letsencrypt/live | grep "$certname" | grep cert.pem)
	if [ "$certPath" == '' ]
	then
		echo "Certname ${certname} doesn't exist - exit"
		exit 2
	fi
	# Actual revok-action
	local revoke="$(certbot revoke -q --cert-path "${certPath}" 2>&1)"
	if [ "$?" != '0' ]
	then
		if [[ $(echo $revoke | grep 'Certificate already revoked') != '' ]]
		then
			echo "Certificate already revoked (${certname}) - exit 3"
			exit 3
		else
			echo 'Something went bad with the revocation. Error message from certbot :'
			echo $revoke
			exit 4
			fi
	fi
}

_delete_cert(){
	echo "DEBUG : deleting a cert..."
	local certname="${1}"
        # Find it, or quit
        local certPath=$(find ${LETS_LIVE_PATH} | grep "$certname" | grep cert.pem)
        if [ "$certPath" == '' ]
        then
                echo "Certname ${certname} doesn't exist - exit"
                exit 2
        fi

	_source_paths_variables ${certname}

        # Actual del-action
	# We get SANs list before we delete the chain
	local list_SANs=$(certbot certificates 2>/dev/null | grep -A 3 "Certificate Name: $certname" | tail -3 | grep Domains | awk -F ":" '{print $2}'| sed --expression 's/^ //')
	echo "DEBUG list_SANs = $list_SANs "
        local delete="$(certbot delete -q --cert-name "${certname}" 2>&1)"
        if [ "$?" != '0' ]
        then
        	echo "Something went bad while deleting ${certname}. Error message from certbot :"
                echo "$delete"
                exit 1
	else
		echo "Deletion of $certname by certbot : OK"
		echo "Deletion from ${HAPX_CERTLIST} :"
		_remove_cert_from_haproxy_lst $certname "$list_SANs" && echo OK || echo NOK
        fi
	# Since we had haproxy fullchain, the directory can't be entirely deleted by certbot
	echo -n "Manual deletion of $certname DIR ${LETS_LIVE_PATH}/${certname} : "
	rm -Rf ${LETS_LIVE_PATH}/${certname} && echo OK || echo NOK

	# Return code to confirm services can be reloaded
	return 66

}

_remove_cert_from_haproxy_lst(){
	local certname="${1}"
	local list_SANs="${2}"
        # Find it, or quit
	# We delete the SANs content, since even for a single certname, $list_SANs will not be empty
	if [[ "${list_SANs}" != '' ]]
	then
		# First we backup the ssl.lst file
		HAPX_CERTLIST_BAK="${HAPX_CERTLIST}.${DATE}"
		cp ${HAPX_CERTLIST} ${HAPX_CERTLIST_BAK}
		# then we delete the line by domain in ssl.lst
		for san in ${list_SANs}
		do
			echo -n "Deleting ${san} from ${HAPX_CERTLIST} :"
			sed -i "/${san}/d" ${HAPX_CERTLIST} && echo OK || echo NOK
		done
		# We reload HAProxy safely
		# -> in todo cases since letshub

	fi

}

_reload_service(){
	local service="$1"
	# Check if service is enabled
	echo -n "Is service ${service} enabled: "
	local check=$(systemctl --quiet is-enabled ${service})
       	if [ "$?" = '0' ]
       	then
		echo YES
		echo -n "Let's restart it: "
		systemctl --quiet reload ${service} && echo OK || echo NOK
	else
		echo 'NO - Nothing to do'
	fi
	
}

_manage_services(){
	if [[ -n "${OTHER_SERVICES_TO_RELOAD}" ]]
	then
		for service in $OTHER_SERVICES_TO_RELOAD
		do
			_reload_service ${service}
		done
	fi
}

_push_certs_on_proxy_via_rsync(){
	local RSYNC_PASSWORD_FILE="${1}" 
	local HAPX_CERTDIR="${2}"
	local RSYNC_USER="${3}"
	local PROXY_IP="${4}"
	local REFRESH_FILE='to_refresh.txt'
	local PUBLISHING_CMD="rsync -avP --delete --exclude=*.pem.* --exclude=ssl2.lst.* --password-file ${RSYNC_PASSWORD_FILE} ${HAPX_CERTDIR}/ ${RSYNC_USER}@${PROXY_IP}::${REMOTE_DEST}"

	if [ -n "${PUBLISHING_CMD}" ] && [ -n "${HAPX_CERTDIR}" ]
	then
		echo -n "Updating refresh file : "
		echo 'yes' >  ${HAPX_CERTDIR}/${REFRESH_FILE} && echo OK || echo NOK
		echo "Pushing certs on proxy... "
		${PUBLISHING_CMD} && echo OK || echo NOK
		#echo " PUBLISHING_CMD = ${PUBLISHING_CMD}"
	else
		echo "PUBLISHING_CMD is empty - no sync with proxy - exit"
		exit 1
	fi
}

################
#### ACTION ####
################

# Source it once and for all ?!
_source_paths_variables

# Check if staging account only, then push --test-cert option automatically
if ([ "$(ls -l ${WORKING_DIR}/accounts/ | tail -2 | grep staging)" != '' ] \
&& [ "$(ls -l ${WORKING_DIR}/accounts/ | wc -l)" -eq '1' ]) 
then
	echo "Auto Staging Mode"
	TESTCERT='--test-cert'
fi
	
case $todo in
	register)
		_register ${REGISTERING_EMAIL}
		;;
        add)
	        _add_cert_for_domain ${domainToAdd}
		_create_haproxy_fullchain ${domainToAdd}
		EXIT_CODE="$?"
		if [[ "${LETSHUB}" == 'no' ]]
		then
			if [[ "$EXIT_CODE" == '66' ]]
			then
				_reload_haproxy "${HAPX_CONFFILE}" "${HAPX_INSTANCE}"
				_manage_services
			fi
		else
			_push_certs_on_proxy_via_rsync ${RSYNC_PASSWORD_FILE} ${HAPX_CERTDIR} ${RSYNC_USER} ${PROXY_IP}
		fi
        ;;

        renew-all)
		_renew_domains
                _update_haproxy_fullchains $OUTPUT_RD --forceRegenerate=${FORCE_REGENERATE}
		EXIT_CODE="$?"
		if [[ "${LETSHUB}" == 'no' ]]
		then
			if [[ "$EXIT_CODE" == '66' ]]
			then
				_reload_haproxy "${HAPX_CONFFILE}" "${HAPX_INSTANCE}"
				_manage_services
			fi
		else
			_push_certs_on_proxy_via_rsync ${RSYNC_PASSWORD_FILE} ${HAPX_CERTDIR} ${RSYNC_USER} ${PROXY_IP}	
		fi
        ;;

        revoke)
		_revoke_cert $domainToRevoke
		#_manage_services
        ;;

	delete)
		_delete_cert $domainToDelete
		EXIT_CODE="$?"
		if [[ "${LETSHUB}" == 'no' ]]
		then
			if [[ "$EXIT_CODE" == '66' ]]
			then
				_reload_haproxy "${HAPX_CONFFILE}" "${HAPX_INSTANCE}"
				_manage_services
			fi
		else
			_push_certs_on_proxy_via_rsync ${RSYNC_PASSWORD_FILE} ${HAPX_CERTDIR} ${RSYNC_USER} ${PROXY_IP}
		fi
	;;
	reload)
		_reload_haproxy "${HAPX_CONFFILE}" "${HAPX_INSTANCE}"
	;;	
        *)
                func_usage
        ;;
esac

